{{- if eq .Values.bootstrap.type "physical" }}
apiVersion: generators.external-secrets.io/v1alpha1
kind: VaultDynamicSecret
metadata:
  name: "{{ include "cnpg-cluster.fullname" . }}-restore-credentials"
  namespace: {{ .Release.Namespace }}
spec:
  path: /{{ .Values.bootstrap.bucket.vault.awsBackend }}/creds/{{ .Values.bootstrap.bucket.vault.awsRole }}
  method: "GET"
  provider:
    server: "{{ .Values.bootstrap.bucket.vault.address }}"
    auth:
      jwt:
        path: "{{ .Values.bootstrap.bucket.vault.authPath }}"
        role: "{{ .Values.bootstrap.bucket.vault.awsRole }}-{{ include "cnpg-cluster.fullname" . }}-restore-{{ .Release.Namespace }}"

        # ... or retrieve a Kubernetes service account token via the `TokenRequest` API
        kubernetesServiceAccountToken:
          serviceAccountRef:
            name: "{{ include "cnpg-cluster.fullname" . }}-restore"
          # `audiences` defaults to `["vault"]` it not supplied
          audiences:
          - "{{ .Values.bootstrap.bucket.vault.address }}"
          # `expirationSeconds` defaults to 10 minutes if not supplied
          expirationSeconds: 600
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ include "cnpg-cluster.fullname" . }}-restore"
spec:
  refreshInterval: "1h"
  target:
    name: "{{ include "cnpg-cluster.fullname" . }}-restore-credentials"
    template:
      engineVersion: v2
      data:
        ACCESS_KEY_ID:  "{{ `{{ .access_key }}` }}"
        ACCESS_SECRET_KEY: "{{ `{{ .secret_key }}` }}"
        ACCESS_SESSION_TOKEN: "{{ `{{ .security_token }}` }}"
  dataFrom:
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: VaultDynamicSecret
        name: "{{ include "cnpg-cluster.fullname" . }}-restore-credentials"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "cnpg-cluster.fullname" . }}-restore

{{- end }}